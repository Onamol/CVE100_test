# -*- coding: utf-8 -*-
"""OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w0RdUvCurgy79AvCaT_Q8MVSVLm5tVvd
"""

class Car: #class name (Create class)
  def __init__(self, brand, model, year):
    self.brand = brand
    self.model = model
    self.year = year

  def description(self):
    return f"This car is a {self.year} {self.brand} {self.model}."

my_car = Car ("Toyota,", "Corolla", 2022) # create an instance of the class (also known as object)

print(my_car.description())

print(my_car.brand)
print(my_car.model)
print(my_car.year)

alice_car = Car("Tesla", "A11", 2025)
john_car = Car("Tesla", "B11", 2024)

print(john_car.model)

from os import SCHED_OTHER
class Student:
  def __init__(self, id, name, gpa, score):
    self.id = id
    self.name = name
    self.gpa = gpa
    self.score = score

  def calculate_grade(self):
    if self.gpa>=3.5:
        return "A"
    elif self.gpa>=2.5:
        return "B"
    else:
        return "C"

  def add_extra_score(self, extra):
      self.score += extra
      return self.score

stu_1 = Student(1, "May", 2.5, 70)
stu_2 = Student (2, "David", 3.5, 90)

stu_2.score

print(stu_1.calculate_grade())

stu_1.add_extra_score(5)

stu_1.score

class Car1:
    def __init__(self, brand, model, year):
      self.brand = brand
      self.model = model
      self.__year = year # private attribute (cannot be accessed outside of the class)

    def get_year(self): # Getter for private attribute
      return self.__year

new_car = Car1("Mercedez", "ModelX", 2025)

new_car.brand

new_car.model

new_car.__year

class BankAccount:
  def __init__(self, owner, balance):
    self.owner = owner
    self.balance = balance

account_1 = BankAccount("May", 1000)

account_1.balance = 500 # Risky for data security

account_1.balance

class ElectricCar(Car):
  def __init__(self, brand, model, year, battery_capacity):
    super().__init__(brand, model, year) # Inherit attributes from Car
    self.battery_capacity = battery_capacity # New attribute

  def battery_info(self):
    return f"This car has a {self.battery_capacity} kWh battery."

my_electric_car = ElectricCar("Tesla", "Model S", 2022, 100)

print(my_electric_car.description()) # function from the parent class Car



print(my_electric_car.battery_info()) #own function

class Car:
    def __init__(self, model, rent_per_day, available):
        self.model = model
        self.rent_per_day = rent_per_day
        self.available = available

    def rent(self, days):
        if self.available:
            total_cost = self.rent_per_day * days
            self.available = False
            print("Car Rented. Total Cost =", total_cost)
        else:
            print("Car is not available to rent")

    def return_car(self):
        self.available = True
        print("Car returned")

    def display(self):
        print("Model =", self.model)
        print("Rent_per_day =", self.rent_per_day)
        print("Available =", self.available)

car1 = Car("Toyota", 3000, True)

car1.rent(3)

car1.display()

car1.return_car()

car1.display()

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def display(self):
        print("name=", self.name)
        print("age=", self.age)

class Student(Person):
    def __init__(self,name,age):
        super(). __init__(name,age)
        self.marks={}

    def add_marks(self,subject,score):
        self.marks[subject] = score

    def display_score(self):

        print("score",self.marks)

    def average(self):
        if len(self.marks)!=0:
            avg = sum(self.marks.values()) / len (self.marks)
            print("Average Score=", avg)
        else:
            print("No score")

Student1 = Student("Foam", 18,)
Student1.display()

Student1.add_marks("Math", 60)
Student1.add_marks("Sci", 65)

Student1.display_score()
print(f"Average score: {Student1.average()}")